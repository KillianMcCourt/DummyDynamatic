# Summary

This PR corresponds to the described changes as PR1 of issue [#457](https://github.com/EPFL-LAP/dynamatic/issues/457). The objective is to lay groundwork necessary to support units that vary in both latency and internal operating frequency - since this frequency is defined by the internal combinational delay, we will focus on the handling of this "delay" going forwards. See the following figure for an illustration of the difference between this delay and the already-supported operator-wide delay : 

![Image](https://github.com/user-attachments/assets/7aa06237-ca44-48b9-90a9-870ec21e94dd)

This first PR focuses on changes to the implementation of the JSON and the latency extraction, but leaves the IR and the backend unit generation untouched.

# Motivation

The current Dynamatic HLS tool assumes each pipelined operation has a single, fixed-latency implementation. 

This means that the current system has no way of :

1 - storing internal combinational delays
2 - returning the correct latency associated with such a delay

This matters because the maximum frequency of a circuit is at most that of the slowest multi-cycle operator, and speed-area tradeoffs along the pareto-frontier are standard in FPGA design.

This limitation is built in three places of the timing information :

1- the components.json, which only lists bitwidth:latency pairs, without dependency on delay. 
2 - the parsing logic, which expects the latency field to be a list of such pairs
3 - the timingModel, which is built to store this structure, and whose getter logic depends on it.



# Assumptions 

The updated code will expect that the provided map only includes pareto-optimal delay : latency pairs, otherwise sub-optimal values may be selected.

# Implementation


## Expanding  ```components.json```  



In order to expand the structure of ```components.json``` representing latency, we have to understand the current structure.



The current structure for latency value is the following:



```



  "MLIR_OP": {

    "latency": {

      "BITWIDTH": LATENCY_VALUE

    },



```



where ```MLIR_OP``` is the name fo the MLIR operation, ```BITWIDTH``` correponds to the bitwidth of the operation, and ```LATENCY_VALUE``` is the value of the latency for the specific MLIR operation with the specific bitwidth value. A concrete example for the operation ```add.f``` is the following: 



```



  "handshake.addf": {

    "latency": {

      "64": 9.0

    },


Therefore, our approach will update the latency field to a map of maps, where the bitwidth will be the keys of the outer map; and delays keys of the inner map, with latency values being the data. This yields :



```



  "MLIR_OP": {

    "latency": {

      "BITWIDTH": {

        "INTERNAL_COMB_DELAY_1": LATENCY_VALUE_1,

        "INTERNAL_COMB_DELAY_2": LATENCY_VALUE_2

      },

    },



```



where ```INTERNAL_COMB_DELAY_1``` and ```INTERNAL_COMB_DELAY_2``` represent the maximum internal combinational delay between two registers of two different implementation of the same MLIR operation with the same bitwidth. These values correspond to the delay of the combinational logic of the figure. For instance, the updated structure for ```addf``` is the following:





```



  "handshake.addf": {

    "latency": {

      "64": {

          "1.3" : 7.0

          "0.9": 9.0

      },

    },



```




